apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: openemr
  labels:
    app: fluent-bit
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
        Health_Check  On
        HC_Errors_Count 5
        HC_Retry_Failure_Count 5
        HC_Period     60

    [INPUT]
        Name              forward
        Listen            0.0.0.0
        Port              24224
        Tag               openemr.application

    [INPUT]
        Name              tail
        Path              /var/www/localhost/htdocs/openemr/sites/default/documents/logs_and_misc/logbook/log*
        Parser            openemr_audit
        Tag               openemr.audit
        Refresh_Interval  5
        Mem_Buf_Limit     50MB
        Skip_Empty_Lines  On
        Buffer_Chunk_Size 32KB
        Buffer_Max_Size   256KB

    [FILTER]
        Name                kubernetes
        Match               openemr.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     openemr.
        Merge_Log           On
        Keep_Log            Off
        K8S-Logging.Parser  On
        K8S-Logging.Exclude On
        Buffer_Size         32KB

    [FILTER]
        Name                record_modifier
        Match               openemr.*
        Record              cluster_name ${CLUSTER_NAME}
        Record              region ${AWS_REGION}

    [OUTPUT]
        Name                cloudwatch_logs
        Match               openemr.application.*
        region              ${AWS_REGION}
        log_group_name      /aws/eks/${CLUSTER_NAME}/openemr/application
        log_stream_prefix   pod-
        auto_create_group   false
        retry_limit         3
        workers             2

    [OUTPUT]
        Name                cloudwatch_logs
        Match               openemr.access
        region              ${AWS_REGION}
        log_group_name      /aws/eks/${CLUSTER_NAME}/openemr/access
        log_stream_prefix   apache-access-
        auto_create_group   false
        retry_limit         3
        workers             2

    [OUTPUT]
        Name                cloudwatch_logs
        Match               openemr.error
        region              ${AWS_REGION}
        log_group_name      /aws/eks/${CLUSTER_NAME}/openemr/error
        log_stream_prefix   apache-error-
        auto_create_group   false
        retry_limit         3
        workers             2

    [OUTPUT]
        Name                cloudwatch_logs
        Match               openemr.audit
        region              ${AWS_REGION}
        log_group_name      /aws/eks/${CLUSTER_NAME}/openemr/audit
        log_stream_prefix   audit-
        auto_create_group   false
        retry_limit         3
        workers             2

  parsers.conf: |
    [PARSER]
        Name   apache
        Format regex
        Regex  ^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
        Time_Key time
        Time_Format %d/%b/%Y:%H:%M:%S %z

    [PARSER]
        Name   apache_error
        Format regex
        Regex  ^\[[^ ]* (?<time>[^\]]*)\] \[(?<level>[^\]]*)\](?: \[pid (?<pid>[^\]]*)\])? \[client (?<client>[^\]]*)\] (?<message>.*)$

    [PARSER]
        Name   openemr_audit
        Format regex
        Regex  ^(?<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) (?<level>\w+) (?<user>\w+) (?<action>.*) (?<details>.*)$
        Time_Key timestamp
        Time_Format %Y-%m-%d %H:%M:%S

    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: openemr
  labels:
    app: fluent-bit
spec:
  selector:
    matchLabels:
      app: fluent-bit
  template:
    metadata:
      labels:
        app: fluent-bit
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2020"
        prometheus.io/path: /api/v1/metrics/prometheus
    spec:
      serviceAccountName: fluent-bit
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: fluent-bit
        image: fluent/fluent-bit:4.0.5
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 2020
          name: http
          protocol: TCP
        env:
        - name: AWS_REGION
          value: "${AWS_REGION}"
        - name: CLUSTER_NAME
          value: "${CLUSTER_NAME}"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: config
          mountPath: /fluent-bit/etc/
        - name: openemr-sites
          mountPath: /var/www/localhost/htdocs/openemr/sites
          readOnly: true
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /
            port: 2020
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 2020
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: fluent-bit-config
      - name: openemr-sites
        persistentVolumeClaim:
          claimName: openemr-sites-pvc
      - name: tmp
        emptyDir: {}
      # EKS Auto Mode handles node selection and scheduling automatically
      # No nodeSelector or tolerations needed

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit
  namespace: openemr
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/fluent-bit-service-account-role
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluent-bit
rules:
- apiGroups: [""]
  resources:
  - namespaces
  - pods
  - pods/logs
  - nodes
  - nodes/proxy
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluent-bit
subjects:
- kind: ServiceAccount
  name: fluent-bit
  namespace: openemr