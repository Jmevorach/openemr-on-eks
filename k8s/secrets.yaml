# =============================================================================
# OpenEMR Secrets Configuration
# =============================================================================
# This file defines Kubernetes secrets for OpenEMR database credentials.
#
# Secret Management:
# - Database connection credentials (host, username, password)
# - Base64 encoded values for security
# - Integration with external-secrets operator (optional)
# - Manual population support for standalone deployments
# =============================================================================

# Database credentials secret for RDS Aurora MySQL connection
apiVersion: v1
kind: Secret
metadata:
  name: openemr-db-credentials              # Secret name referenced in deployment.yaml
  namespace: openemr                        # Target namespace for the secret
type: Opaque                                # Generic secret type for custom data
data:
  # Database connection parameters (populated by external-secrets or manually)
  # All values must be base64 encoded for Kubernetes secrets
  mysql-host: ""                            # RDS Aurora endpoint (e.g., openemr-aurora.cluster-xxx.rds.amazonaws.com)
  mysql-user: b3BlbmVtcg==                  # Database username: "openemr" (base64 encoded)
  mysql-password: ""                        # Database password (base64 encoded) - set by deploy script
  mysql-database: b3BlbmVtcg==              # Database name: "openemr" (base64 encoded)
---
# Redis/ElastiCache credentials secret for caching and session storage
apiVersion: v1
kind: Secret
metadata:
  name: openemr-redis-credentials           # Secret name referenced in deployment.yaml
  namespace: openemr                        # Target namespace for the secret
type: Opaque                                # Generic secret type for custom data
data:
  # Redis connection parameters (populated by external-secrets or manually)
  # All values must be base64 encoded for Kubernetes secrets
  redis-host: ""                            # ElastiCache Redis endpoint (e.g., openemr-redis.xxx.cache.amazonaws.com)
  redis-port: ""                            # Redis port (usually "6380" for TLS or "6379" for non-TLS)
  redis-password: ""                        # Redis password (base64 encoded) - set by deploy script
---
# OpenEMR application credentials secret for admin access
apiVersion: v1
kind: Secret
metadata:
  name: openemr-app-credentials             # Secret name referenced in deployment.yaml
  namespace: openemr                        # Target namespace for the secret
type: Opaque                                # Generic secret type for custom data
data:
  # OpenEMR admin credentials for initial setup and management
  # All values must be base64 encoded for Kubernetes secrets
  admin-user: YWRtaW4=                      # Admin username: "admin" (base64 encoded)
  admin-password: ""                        # Admin password (base64 encoded) - generated by deploy script
---
# TLS certificate secret for SSL/TLS encryption (self-signed mode)
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret                          # Secret name referenced in service.yaml for SSL passthrough
  namespace: openemr                        # Target namespace for the secret
type: kubernetes.io/tls                     # Standard TLS secret type for certificates
data:
  # TLS certificate and private key for HTTPS encryption
  # Populated by SSL renewal CronJob or manually for self-signed certificates
  tls.crt: ""                               # TLS certificate (base64 encoded PEM format)
  tls.key: ""                               # TLS private key (base64 encoded PEM format)
