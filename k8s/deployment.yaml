apiVersion: apps/v1
kind: Deployment
metadata:
  name: openemr
  namespace: openemr
  labels:
    app: openemr
    version: v1
spec:
  # replicas managed by HPA - see hpa.yaml
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: openemr
  template:
    metadata:
      labels:
        app: openemr
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: openemr-sa
      securityContext:
        runAsNonRoot: false
        seccompProfile:
          type: RuntimeDefault

      containers:
      - name: openemr
        image: openemr/openemr:${OPENEMR_VERSION}
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: true
          readOnlyRootFilesystem: false
          runAsUser: 0
          runAsGroup: 0
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
            - CHOWN
            - SETUID
            - SETGID
            - FOWNER
            - DAC_OVERRIDE
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        workingDir: /var/www/localhost/htdocs/openemr
        command: ["/bin/sh", "-c"]
        args:
        - |          
          # Download AWS root CA certificates for secure connections
          echo "=== Downloading SSL certificates ==="
          curl --cacert /swarm-pieces/ssl/certs/ca-certificates.crt -o /root/certs/redis/redis-ca --create-dirs https://www.amazontrust.com/repository/AmazonRootCA1.pem && \
          chown apache /root/certs/redis/redis-ca && \
          curl --cacert /swarm-pieces/ssl/certs/ca-certificates.crt -o /root/certs/mysql/server/mysql-ca --create-dirs https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem && \
          chown apache /root/certs/mysql/server/mysql-ca && \
          
          # Setting up crontab for certificate renewal
          echo "1 23 * * * httpd -k graceful" >> /etc/crontabs/root && \
          
          echo "=== Setting up OpenEMR script ==="
          chmod +x ./openemr.sh && \
          
          echo "=== Starting OpenEMR initialization ==="
          ./openemr.sh && \
          
          echo "=== OpenEMR Ready ==="
          # Keep the container running
          tail -f /dev/null
        env:
        - name: MYSQL_HOST
          valueFrom:
            secretKeyRef:
              name: openemr-db-credentials
              key: mysql-host
        - name: MYSQL_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: openemr-db-credentials
              key: mysql-user
        - name: MYSQL_ROOT_PASS
          valueFrom:
            secretKeyRef:
              name: openemr-db-credentials
              key: mysql-password
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: openemr-db-credentials
              key: mysql-user
        - name: MYSQL_PASS
          valueFrom:
            secretKeyRef:
              name: openemr-db-credentials
              key: mysql-password
        - name: MYSQL_PORT
          value: "3306"
        - name: REDIS_SERVER
          valueFrom:
            secretKeyRef:
              name: openemr-redis-credentials
              key: redis-host
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: openemr-redis-credentials
              key: redis-port
        - name: REDIS_USERNAME
          value: "openemr"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: openemr-redis-credentials
              key: redis-password
        - name: REDIS_TLS
          value: "yes"
        - name: OE_USER
          valueFrom:
            secretKeyRef:
              name: openemr-app-credentials
              key: admin-user
        - name: OE_PASS
          valueFrom:
            secretKeyRef:
              name: openemr-app-credentials
              key: admin-password
        - name: SWARM_MODE
          value: "yes"
        # OpenEMR API Configuration (conditionally set by deploy script)
        # OPENEMR_SETTING_rest_api will be added if API is enabled
        # OPENEMR_SETTING_rest_fhir_api will be added if API is enabled
        # OpenEMR Patient Portal Configuration (conditionally set by deploy script)  
        # OPENEMR_SETTING_portal_onsite_two_address will be added if portal is enabled
        # OPENEMR_SETTING_portal_onsite_two_enable will be added if portal is enabled
        # OPENEMR_SETTING_ccda_alt_service_enable will be added if portal is enabled
        # OPENEMR_SETTING_rest_portal_api will be added if portal is enabled
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        startupProbe:
          httpGet:
            path: /interface/login/login.php
            port: 80
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 25
        readinessProbe:
          httpGet:
            path: /interface/login/login.php
            port: 80
            scheme: HTTP
          initialDelaySeconds: 240
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /interface/login/login.php
            port: 80
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 60
          timeoutSeconds: 10
          failureThreshold: 5
        volumeMounts:
        - name: openemr-sites
          mountPath: /var/www/localhost/htdocs/openemr/sites
        - name: openemr-ssl
          mountPath: /etc/ssl
        - name: openemr-letsencrypt
          mountPath: /etc/letsencrypt

      - name: fluent-bit-sidecar
        image: fluent/fluent-bit:4.0.8
        ports:
        - containerPort: 2020
          name: fluent-bit-http
          protocol: TCP
        - containerPort: 24224
          name: fluent-bit-fwd
          protocol: TCP
        env:
        - name: AWS_REGION
          value: "${AWS_REGION}"
        - name: CLUSTER_NAME
          value: "${CLUSTER_NAME}"
        - name: AWS_WEB_IDENTITY_TOKEN_FILE
          value: "/var/run/secrets/eks.amazonaws.com/serviceaccount/token"
        - name: AWS_ROLE_ARN
          value: "${OPENEMR_ROLE_ARN}"


        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "50m"
            memory: "64Mi"
        volumeMounts:
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc/
        - name: tmp
          mountPath: /tmp

        livenessProbe:
          httpGet:
            path: /
            port: 2020
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 2020
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3

      volumes:
      - name: db-credentials
        secret:
          secretName: openemr-db-credentials
      - name: redis-credentials
        secret:
          secretName: openemr-redis-credentials
      - name: openemr-sites
        persistentVolumeClaim:
          claimName: openemr-sites-pvc
      - name: openemr-ssl
        persistentVolumeClaim:
          claimName: openemr-ssl-pvc
      - name: openemr-letsencrypt
        persistentVolumeClaim:
          claimName: openemr-letsencrypt-pvc
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-sidecar-config
      - name: tmp
        emptyDir: {}


      # EKS Auto Mode handles node selection, scheduling, and optimal placement automatically
      # Add tolerations for EKS Auto Mode nodes
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "eks.amazonaws.com/compute-type"
        operator: "Equal"
        value: "auto-mode"
        effect: "NoSchedule"
