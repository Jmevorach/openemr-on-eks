# OpenEMR Monitoring Stack - Configuration Reference
#
# ‚ö†Ô∏è  IMPORTANT: This file is for REFERENCE ONLY
#
# The install-monitoring.sh script generates Helm values dynamically
# based on your environment and configuration. This file shows what
# the generated configuration looks like for documentation purposes.
#
# To install monitoring, use: ./install-monitoring.sh
# To customize, set environment variables or create openemr-monitoring.conf

# =============================================================================
# DYNAMIC CONFIGURATION APPROACH
# =============================================================================
# ‚úÖ Generates secure passwords and stores them safely
# ‚úÖ Sets up comprehensive security contexts and RBAC
# ‚úÖ Integrates Prometheus, Grafana, Loki, and Jaeger
# ‚úÖ Configures AlertManager with optional Slack integration
# ‚úÖ Provides ingress configuration with TLS and basic auth

# =============================================================================
# CONFIGURATION OPTIONS
# =============================================================================
# Set these environment variables to customize the installation:

# Storage Configuration
# STORAGE_CLASS_RWO="gp3-monitoring-encrypted"  # ReadWriteOnce storage
# STORAGE_CLASS_RWX=""                          # ReadWriteMany storage (optional)
# ACCESS_MODE_RWO="ReadWriteOncePod"            # Access mode (auto-detected)

# Namespaces
# MONITORING_NAMESPACE="monitoring"             # Monitoring components
# OPENEMR_NAMESPACE="openemr"                   # OpenEMR application
# OBSERVABILITY_NAMESPACE="observability"      # Jaeger operator

# Chart Versions (pinned for stability)
# CHART_KPS_VERSION="75.18.1"                  # kube-prometheus-stack
# CHART_LOKI_VERSION="3.5.3"                   # Loki stack
# CHART_JAEGER_VERSION="3.4.1"                 # Jaeger

# Ingress Configuration (optional)
# ENABLE_INGRESS="0"                            # Enable NGINX ingress
# GRAFANA_HOSTNAME=""                           # Grafana hostname
# ENABLE_BASIC_AUTH="0"                         # Enable basic auth
# BASIC_AUTH_USER="admin"                       # Basic auth username
# TLS_SECRET_NAME=""                            # TLS secret (auto-generated if empty)

# AlertManager Slack Integration (optional)
# SLACK_WEBHOOK_URL=""                          # Slack webhook URL
# SLACK_CHANNEL=""                              # Slack channel

# =============================================================================
# EXAMPLE GENERATED VALUES (for reference)
# =============================================================================
# This is what the script generates dynamically:

# grafana:
#   enabled: true
#   adminUser: admin
#   admin:
#     existingSecret: "grafana-admin-secret"    # Secure credential management
#     userKey: admin-user
#     passwordKey: admin-password
#
#   persistence:
#     enabled: true
#     storageClassName: gp3-monitoring-encrypted
#     size: 20Gi
#     accessModes: ["ReadWriteOncePod"]          # Auto-detected optimal mode
#
#   securityContext:
#     runAsUser: 472
#     runAsGroup: 472
#     fsGroup: 472
#
#   resources:
#     requests: { cpu: 100m, memory: 256Mi }
#     limits:   { cpu: 1000m, memory: 1Gi }
#
#   sidecar:
#     dashboards:
#       enabled: true
#       searchNamespace: ALL                     # Auto-discover dashboards
#     datasources:
#       enabled: true
#       searchNamespace: ALL
#
#   grafana.ini:
#     security:
#       cookie_secure: true
#       cookie_samesite: strict
#       disable_gravatar: true
#     analytics:
#       reporting_enabled: false
#       check_for_updates: false
#     unified_alerting:
#       enabled: true

# prometheus:
#   prometheusSpec:
#     serviceMonitorSelector: {}
#     serviceMonitorNamespaceSelector: {}
#     ruleSelector: {}
#     ruleNamespaceSelector: {}
#
#     storageSpec:
#       volumeClaimTemplate:
#         spec:
#           storageClassName: gp3-monitoring-encrypted
#           accessModes: ["ReadWriteOncePod"]
#           resources: { requests: { storage: 100Gi } }
#
#     resources:
#       requests: { cpu: 500m, memory: 2Gi }
#     limits:   { cpu: 2000m, memory: 4Gi }
#
#     retention: 30d
#     retentionSize: 90GB
#
#     securityContext:
#       runAsUser: 1000
#       runAsGroup: 3000
#       fsGroup: 2000

# =============================================================================
# ADVANCED FEATURES
# =============================================================================

# üîí Enhanced Security:
# - Automatic RBAC configuration
# - Network policies for pod isolation
# - Security contexts with non-root users
# - Encrypted storage with dedicated KMS keys

# üìä Comprehensive Observability:
# - Prometheus metrics collection and alerting
# - Grafana dashboards with auto-discovery
# - Loki log aggregation with 720h retention
# - Jaeger distributed tracing
# - OpenEMR-specific monitoring (ServiceMonitor, PrometheusRule)

# üöÄ Operational Excellence:
# - Comprehensive health checks and validation
# - Automatic credential generation and secure storage
# - Detailed audit logging for regulatory compliance
# - Retry logic with exponential backoff

# üåê Optional Ingress:
# - NGINX ingress with TLS termination
# - Basic authentication support
# - Self-signed certificate generation
# - Custom hostname configuration

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Basic installation:
# cd monitoring && ./install-monitoring.sh

# With Slack alerts:
# export SLACK_WEBHOOK_URL="https://hooks.slack.com/services/..."
# export SLACK_CHANNEL="#alerts"
# ./install-monitoring.sh

# With ingress and basic auth:
# export ENABLE_INGRESS="1"
# export GRAFANA_HOSTNAME="grafana.example.com"
# export ENABLE_BASIC_AUTH="1"
# ./install-monitoring.sh

# Custom storage configuration:
# export STORAGE_CLASS_RWX="efs-sc"
# ./install-monitoring.sh

# =============================================================================
# ACCESSING SERVICES
# =============================================================================

# Port-forward access (default):
# kubectl -n monitoring port-forward svc/prometheus-stack-grafana 3000:80
# kubectl -n monitoring port-forward svc/prometheus-stack-kube-prom-prometheus 9090:9090
# kubectl -n monitoring port-forward svc/loki 3100:3100
# kubectl -n monitoring port-forward svc/jaeger-query 16686:16686

# Credentials are stored in: monitoring/credentials/monitoring-credentials.txt

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Check installation status:
# ./install-monitoring.sh status

# Verify components:
# ./install-monitoring.sh verify

# Uninstall if needed:
# ./install-monitoring.sh uninstall

# Debug information is automatically captured in:
# - monitoring/helm-install-*.log
# - monitoring/debug-*.log (on errors)
# - monitoring/openemr-monitoring.log
# - monitoring/openemr-monitoring-audit.log
